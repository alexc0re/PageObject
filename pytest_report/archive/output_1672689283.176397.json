{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 4}, "tests": {"0": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x7f956072b8b0>, name = 'browsermode', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browsermode'\n\nvenv/lib/python3.9/site-packages/_pytest/config/__init__.py:1489: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nget_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x7f9560fdee80>, request = <SubRequest 'get_webdriver' for <Function test_successful_login>>\n\n    @pytest.fixture\n    def get_webdriver(get_chrome_options, request):\n>       driver_mode = request.config.getoption('browsermode')\nE       ValueError: no option named 'browsermode'\n\nconftest.py:27: ValueError\n", "test_name": "test_successful_login", "rerun": "0"}, "1": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x7f956072b8b0>, name = 'browsermode', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browsermode'\n\nvenv/lib/python3.9/site-packages/_pytest/config/__init__.py:1489: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nget_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x7f9560fde6d0>, request = <SubRequest 'get_webdriver' for <Function test_successful_login>>\n\n    @pytest.fixture\n    def get_webdriver(get_chrome_options, request):\n>       driver_mode = request.config.getoption('browsermode')\nE       ValueError: no option named 'browsermode'\n\nconftest.py:27: ValueError\n", "test_name": "test_successful_login", "rerun": "0"}, "2": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x7f956072b8b0>, name = 'browsermode', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browsermode'\n\nvenv/lib/python3.9/site-packages/_pytest/config/__init__.py:1489: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nget_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x7f9540200580>, request = <SubRequest 'get_webdriver' for <Function test_unsuccessful_login>>\n\n    @pytest.fixture\n    def get_webdriver(get_chrome_options, request):\n>       driver_mode = request.config.getoption('browsermode')\nE       ValueError: no option named 'browsermode'\n\nconftest.py:27: ValueError\n", "test_name": "test_unsuccessful_login", "rerun": "0"}, "3": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x7f956072b8b0>, name = 'browsermode', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browsermode'\n\nvenv/lib/python3.9/site-packages/_pytest/config/__init__.py:1489: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nget_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x7f954015e670>, request = <SubRequest 'get_webdriver' for <Function test_unsuccessful_login>>\n\n    @pytest.fixture\n    def get_webdriver(get_chrome_options, request):\n>       driver_mode = request.config.getoption('browsermode')\nE       ValueError: no option named 'browsermode'\n\nconftest.py:27: ValueError\n", "test_name": "test_unsuccessful_login", "rerun": "0"}}, "suite_name": "tests/test_index_page.py"}, "1": {"suite_name": "tests/test_main_page.py", "tests": {"0": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x7f956072b8b0>, name = 'browsermode', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browsermode'\n\nvenv/lib/python3.9/site-packages/_pytest/config/__init__.py:1489: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nget_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x7f954020ea60>, request = <SubRequest 'get_webdriver' for <Function test_some>>\n\n    @pytest.fixture\n    def get_webdriver(get_chrome_options, request):\n>       driver_mode = request.config.getoption('browsermode')\nE       ValueError: no option named 'browsermode'\n\nconftest.py:27: ValueError\n", "test_name": "test_some", "rerun": "0"}, "1": {"status": "ERROR", "message": "self = <_pytest.config.Config object at 0x7f956072b8b0>, name = 'browsermode', default = <NOTSET>, skip = False\n\n    def getoption(self, name: str, default=notset, skip: bool = False):\n        \"\"\"Return command line option value.\n    \n        :param name: Name of the option.  You may also specify\n            the literal ``--OPT`` option instead of the \"dest\" option name.\n        :param default: Default value if no option of that name exists.\n        :param skip: If True, raise pytest.skip if option does not exists\n            or has a None value.\n        \"\"\"\n        name = self._opt2dest.get(name, name)\n        try:\n>           val = getattr(self.option, name)\nE           AttributeError: 'Namespace' object has no attribute 'browsermode'\n\nvenv/lib/python3.9/site-packages/_pytest/config/__init__.py:1489: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nget_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x7f954015e8b0>, request = <SubRequest 'get_webdriver' for <Function test_some>>\n\n    @pytest.fixture\n    def get_webdriver(get_chrome_options, request):\n>       driver_mode = request.config.getoption('browsermode')\nE       ValueError: no option named 'browsermode'\n\nconftest.py:27: ValueError\n", "test_name": "test_some", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}}}}, "date": "January 02, 2023", "start_time": 1672688794.199977, "total_suite": 2, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "6", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "6"}